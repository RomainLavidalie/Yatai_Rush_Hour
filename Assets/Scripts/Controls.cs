//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Shooting"",
            ""id"": ""e2babb9b-768a-4d84-b20b-fc51d50c0dd7"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""2262a36b-ff4f-461d-9d4a-f0baad58d240"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b3fa88e3-6256-4057-b2e8-6d36bd1b8c95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Mode"",
                    ""type"": ""Button"",
                    ""id"": ""98d13454-8e10-48a3-88c9-c95df278d72b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c8e490b-c610-4785-884f-f04217b23ca4"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f6913d-c316-48b2-a6bb-e225f14c7960"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9575a2a4-8a4e-427a-be68-886e11fbf60a"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Switch Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cooking"",
            ""id"": ""44848158-9289-484b-bf7e-db111283f7e5"",
            ""actions"": [
                {
                    ""name"": ""LookX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3387591a-bb3c-43c5-8ff8-43d3cab97965"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""de737605-571e-4315-b75c-2443aed0a5cf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ecc24f08-04ab-4fce-a74f-b5cc2ee05aa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""816228d5-e9b8-41d2-b925-cde3f20cd0e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddRamen"",
                    ""type"": ""Button"",
                    ""id"": ""62d9212d-517e-42cb-a7b8-9f4a9c4d72a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveRamen"",
                    ""type"": ""Button"",
                    ""id"": ""a623d4a9-a711-479a-908d-f37f229310ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCloseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""fc846925-26e1-4eb7-96ac-de6b8d9fcb18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCloseRecipe"",
                    ""type"": ""Button"",
                    ""id"": ""4c220244-b119-40c4-a974-af5943a6ceed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4cd6f508-41f4-4c9b-920e-b6a500318a05"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cb5b0db-9382-4c8c-8e56-98ce18f4bf11"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5496b9a-cf98-488e-95ae-a120cc2643e1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b043f1c-debf-497a-ad32-88d1de0998a8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20af21af-72b2-4be2-95b8-88aad31b6c47"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddRamen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6330583-6cc7-4b72-bd7c-a912367d5932"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveRamen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e25ac501-ca46-408b-b805-d00db361b6dd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92228009-46f9-45a1-9733-112d04caa81c"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenCloseRecipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Shooting
        m_Shooting = asset.FindActionMap("Shooting", throwIfNotFound: true);
        m_Shooting_Look = m_Shooting.FindAction("Look", throwIfNotFound: true);
        m_Shooting_Fire = m_Shooting.FindAction("Fire", throwIfNotFound: true);
        m_Shooting_SwitchMode = m_Shooting.FindAction("Switch Mode", throwIfNotFound: true);
        // Cooking
        m_Cooking = asset.FindActionMap("Cooking", throwIfNotFound: true);
        m_Cooking_LookX = m_Cooking.FindAction("LookX", throwIfNotFound: true);
        m_Cooking_LookY = m_Cooking.FindAction("LookY", throwIfNotFound: true);
        m_Cooking_Interact = m_Cooking.FindAction("Interact", throwIfNotFound: true);
        m_Cooking_Shoot = m_Cooking.FindAction("Shoot", throwIfNotFound: true);
        m_Cooking_AddRamen = m_Cooking.FindAction("AddRamen", throwIfNotFound: true);
        m_Cooking_RemoveRamen = m_Cooking.FindAction("RemoveRamen", throwIfNotFound: true);
        m_Cooking_OpenCloseMenu = m_Cooking.FindAction("OpenCloseMenu", throwIfNotFound: true);
        m_Cooking_OpenCloseRecipe = m_Cooking.FindAction("OpenCloseRecipe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shooting
    private readonly InputActionMap m_Shooting;
    private IShootingActions m_ShootingActionsCallbackInterface;
    private readonly InputAction m_Shooting_Look;
    private readonly InputAction m_Shooting_Fire;
    private readonly InputAction m_Shooting_SwitchMode;
    public struct ShootingActions
    {
        private @Controls m_Wrapper;
        public ShootingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Shooting_Look;
        public InputAction @Fire => m_Wrapper.m_Shooting_Fire;
        public InputAction @SwitchMode => m_Wrapper.m_Shooting_SwitchMode;
        public InputActionMap Get() { return m_Wrapper.m_Shooting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingActions set) { return set.Get(); }
        public void SetCallbacks(IShootingActions instance)
        {
            if (m_Wrapper.m_ShootingActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnLook;
                @Fire.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnFire;
                @SwitchMode.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSwitchMode;
                @SwitchMode.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSwitchMode;
                @SwitchMode.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSwitchMode;
            }
            m_Wrapper.m_ShootingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @SwitchMode.started += instance.OnSwitchMode;
                @SwitchMode.performed += instance.OnSwitchMode;
                @SwitchMode.canceled += instance.OnSwitchMode;
            }
        }
    }
    public ShootingActions @Shooting => new ShootingActions(this);

    // Cooking
    private readonly InputActionMap m_Cooking;
    private ICookingActions m_CookingActionsCallbackInterface;
    private readonly InputAction m_Cooking_LookX;
    private readonly InputAction m_Cooking_LookY;
    private readonly InputAction m_Cooking_Interact;
    private readonly InputAction m_Cooking_Shoot;
    private readonly InputAction m_Cooking_AddRamen;
    private readonly InputAction m_Cooking_RemoveRamen;
    private readonly InputAction m_Cooking_OpenCloseMenu;
    private readonly InputAction m_Cooking_OpenCloseRecipe;
    public struct CookingActions
    {
        private @Controls m_Wrapper;
        public CookingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookX => m_Wrapper.m_Cooking_LookX;
        public InputAction @LookY => m_Wrapper.m_Cooking_LookY;
        public InputAction @Interact => m_Wrapper.m_Cooking_Interact;
        public InputAction @Shoot => m_Wrapper.m_Cooking_Shoot;
        public InputAction @AddRamen => m_Wrapper.m_Cooking_AddRamen;
        public InputAction @RemoveRamen => m_Wrapper.m_Cooking_RemoveRamen;
        public InputAction @OpenCloseMenu => m_Wrapper.m_Cooking_OpenCloseMenu;
        public InputAction @OpenCloseRecipe => m_Wrapper.m_Cooking_OpenCloseRecipe;
        public InputActionMap Get() { return m_Wrapper.m_Cooking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CookingActions set) { return set.Get(); }
        public void SetCallbacks(ICookingActions instance)
        {
            if (m_Wrapper.m_CookingActionsCallbackInterface != null)
            {
                @LookX.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnLookX;
                @LookX.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnLookX;
                @LookX.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnLookX;
                @LookY.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnLookY;
                @LookY.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnLookY;
                @LookY.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnLookY;
                @Interact.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnInteract;
                @Shoot.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnShoot;
                @AddRamen.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnAddRamen;
                @AddRamen.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnAddRamen;
                @AddRamen.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnAddRamen;
                @RemoveRamen.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnRemoveRamen;
                @RemoveRamen.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnRemoveRamen;
                @RemoveRamen.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnRemoveRamen;
                @OpenCloseMenu.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnOpenCloseMenu;
                @OpenCloseMenu.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnOpenCloseMenu;
                @OpenCloseMenu.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnOpenCloseMenu;
                @OpenCloseRecipe.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnOpenCloseRecipe;
                @OpenCloseRecipe.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnOpenCloseRecipe;
                @OpenCloseRecipe.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnOpenCloseRecipe;
            }
            m_Wrapper.m_CookingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LookX.started += instance.OnLookX;
                @LookX.performed += instance.OnLookX;
                @LookX.canceled += instance.OnLookX;
                @LookY.started += instance.OnLookY;
                @LookY.performed += instance.OnLookY;
                @LookY.canceled += instance.OnLookY;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @AddRamen.started += instance.OnAddRamen;
                @AddRamen.performed += instance.OnAddRamen;
                @AddRamen.canceled += instance.OnAddRamen;
                @RemoveRamen.started += instance.OnRemoveRamen;
                @RemoveRamen.performed += instance.OnRemoveRamen;
                @RemoveRamen.canceled += instance.OnRemoveRamen;
                @OpenCloseMenu.started += instance.OnOpenCloseMenu;
                @OpenCloseMenu.performed += instance.OnOpenCloseMenu;
                @OpenCloseMenu.canceled += instance.OnOpenCloseMenu;
                @OpenCloseRecipe.started += instance.OnOpenCloseRecipe;
                @OpenCloseRecipe.performed += instance.OnOpenCloseRecipe;
                @OpenCloseRecipe.canceled += instance.OnOpenCloseRecipe;
            }
        }
    }
    public CookingActions @Cooking => new CookingActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IShootingActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSwitchMode(InputAction.CallbackContext context);
    }
    public interface ICookingActions
    {
        void OnLookX(InputAction.CallbackContext context);
        void OnLookY(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnAddRamen(InputAction.CallbackContext context);
        void OnRemoveRamen(InputAction.CallbackContext context);
        void OnOpenCloseMenu(InputAction.CallbackContext context);
        void OnOpenCloseRecipe(InputAction.CallbackContext context);
    }
}
