//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Shooting"",
            ""id"": ""e2babb9b-768a-4d84-b20b-fc51d50c0dd7"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""2262a36b-ff4f-461d-9d4a-f0baad58d240"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b3fa88e3-6256-4057-b2e8-6d36bd1b8c95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Mode"",
                    ""type"": ""Button"",
                    ""id"": ""98d13454-8e10-48a3-88c9-c95df278d72b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c8e490b-c610-4785-884f-f04217b23ca4"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f6913d-c316-48b2-a6bb-e225f14c7960"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9575a2a4-8a4e-427a-be68-886e11fbf60a"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Switch Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cooking"",
            ""id"": ""44848158-9289-484b-bf7e-db111283f7e5"",
            ""actions"": [
                {
                    ""name"": ""Switch Mode"",
                    ""type"": ""Button"",
                    ""id"": ""9c2ccb28-e88c-4d06-bb8b-e2319ad0c54c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ac641a2-4138-4773-82ef-0e989f3aac32"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Switch Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Shooting
        m_Shooting = asset.FindActionMap("Shooting", throwIfNotFound: true);
        m_Shooting_Look = m_Shooting.FindAction("Look", throwIfNotFound: true);
        m_Shooting_Fire = m_Shooting.FindAction("Fire", throwIfNotFound: true);
        m_Shooting_SwitchMode = m_Shooting.FindAction("Switch Mode", throwIfNotFound: true);
        // Cooking
        m_Cooking = asset.FindActionMap("Cooking", throwIfNotFound: true);
        m_Cooking_SwitchMode = m_Cooking.FindAction("Switch Mode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shooting
    private readonly InputActionMap m_Shooting;
    private IShootingActions m_ShootingActionsCallbackInterface;
    private readonly InputAction m_Shooting_Look;
    private readonly InputAction m_Shooting_Fire;
    private readonly InputAction m_Shooting_SwitchMode;
    public struct ShootingActions
    {
        private @Controls m_Wrapper;
        public ShootingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Shooting_Look;
        public InputAction @Fire => m_Wrapper.m_Shooting_Fire;
        public InputAction @SwitchMode => m_Wrapper.m_Shooting_SwitchMode;
        public InputActionMap Get() { return m_Wrapper.m_Shooting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingActions set) { return set.Get(); }
        public void SetCallbacks(IShootingActions instance)
        {
            if (m_Wrapper.m_ShootingActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnLook;
                @Fire.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnFire;
                @SwitchMode.started -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSwitchMode;
                @SwitchMode.performed -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSwitchMode;
                @SwitchMode.canceled -= m_Wrapper.m_ShootingActionsCallbackInterface.OnSwitchMode;
            }
            m_Wrapper.m_ShootingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @SwitchMode.started += instance.OnSwitchMode;
                @SwitchMode.performed += instance.OnSwitchMode;
                @SwitchMode.canceled += instance.OnSwitchMode;
            }
        }
    }
    public ShootingActions @Shooting => new ShootingActions(this);

    // Cooking
    private readonly InputActionMap m_Cooking;
    private ICookingActions m_CookingActionsCallbackInterface;
    private readonly InputAction m_Cooking_SwitchMode;
    public struct CookingActions
    {
        private @Controls m_Wrapper;
        public CookingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchMode => m_Wrapper.m_Cooking_SwitchMode;
        public InputActionMap Get() { return m_Wrapper.m_Cooking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CookingActions set) { return set.Get(); }
        public void SetCallbacks(ICookingActions instance)
        {
            if (m_Wrapper.m_CookingActionsCallbackInterface != null)
            {
                @SwitchMode.started -= m_Wrapper.m_CookingActionsCallbackInterface.OnSwitchMode;
                @SwitchMode.performed -= m_Wrapper.m_CookingActionsCallbackInterface.OnSwitchMode;
                @SwitchMode.canceled -= m_Wrapper.m_CookingActionsCallbackInterface.OnSwitchMode;
            }
            m_Wrapper.m_CookingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchMode.started += instance.OnSwitchMode;
                @SwitchMode.performed += instance.OnSwitchMode;
                @SwitchMode.canceled += instance.OnSwitchMode;
            }
        }
    }
    public CookingActions @Cooking => new CookingActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IShootingActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnSwitchMode(InputAction.CallbackContext context);
    }
    public interface ICookingActions
    {
        void OnSwitchMode(InputAction.CallbackContext context);
    }
}
